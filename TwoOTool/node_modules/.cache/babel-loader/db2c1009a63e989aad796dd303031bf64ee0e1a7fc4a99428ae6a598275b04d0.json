{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport TeamService from '../services/TeamService';\nimport TaskService from '../services/TaskService';\nimport axios from 'axios';\nimport router from '../router';\nexport default {\n  props: ['initialContent'],\n  data() {\n    return {\n      dialog: false,\n      dateMenu: false,\n      title: '',\n      info: '',\n      dueDate: null,\n      selectedItem: null,\n      items: [],\n      taskstatus: [],\n      inputRules: [v => v.length > 0 || 'Please provide the input'],\n      task: {\n        id: this.initialContent.id,\n        title: this.initialContent.title,\n        info: this.initialContent.info,\n        status: this.initialContent.status,\n        assign: this.initialContent.assign,\n        dueDate: this.initialContent.dueDate\n      }\n    };\n  },\n  methods: {\n    validate() {\n      if (this.$refs.form.validate()) {\n        this.$emit('editProject', this.task);\n        this.dialog = false;\n      }\n      try {\n        const response = axios.post('http://localhost:8080/tasks', this.task);\n        console.log('Response:', response.data);\n      } catch (error) {\n        console.error('Error:', error);\n      }\n      this.dialog = false, this.dateMenu = false, this.$emit('editProject', this.task);\n    },\n    closePopup() {\n      if (this.$refs.form.validate()) {\n        this.dialog = false;\n      }\n      this.$router.push('/projects');\n    },\n    getEmployees() {\n      TeamService.getEmployees().then(response => {\n        this.items = response.data;\n      });\n    },\n    getTaskStatus() {\n      TaskService.getTaskStatus().then(response => {\n        this.taskstatus = response.data;\n      });\n    }\n  },\n  created() {\n    this.getEmployees(), this.getTaskStatus();\n  }\n};","map":{"version":3,"names":["TeamService","TaskService","axios","router","props","data","dialog","dateMenu","title","info","dueDate","selectedItem","items","taskstatus","inputRules","v","length","task","id","initialContent","status","assign","methods","validate","$refs","form","$emit","response","post","console","log","error","closePopup","$router","push","getEmployees","then","getTaskStatus","created"],"sources":["src/components/EditPopup.vue"],"sourcesContent":["<template>\r\n    <v-dialog max-width=\"600px\" v-model=\"dialog\">\r\n        <template v-slot:activator=\"{ on, attrs }\">\r\n            <v-btn v-bind=\"attrs\" v-on=\"on\">Edit Task</v-btn>\r\n        </template>\r\n        <v-form ref=\"form\">\r\n            <v-card>\r\n                <v-card-title>Edit Task</v-card-title>\r\n                <v-divider></v-divider>\r\n                <v-card-text class=\"pt-5 pb-0\">\r\n                    <v-text-field label=\"Title\" v-model=\"task.title\" outlined color=\"indigo\"></v-text-field>\r\n                    <v-textarea label=\"Information\" v-model=\"task.info\" rows=\"3\" outlined color=\"indigo\"></v-textarea>\r\n                    <v-select v-model=\"task.assign\" :items=\"items\" item-text=\"name\" item-value=\"id\" label=\"Assign\" outlined color=\"indigo\"></v-select>\r\n                    <v-select v-model=\"task.status\" :items=\"taskstatus\" item-text=\"status\" item-value=\"id\" label=\"Status\" outlined color=\"indigo\"></v-select>\r\n                    <v-menu v-model=\"dateMenu\" :close-on-content-click=\"false\">\r\n                        <template v-slot:activator=\"{ on, attrs }\">\r\n                            <v-text-field v-model=\"task.dueDate\" label=\"Due date\" readonly outlined v-bind=\"attrs\"\r\n                                v-on=\"on\" color=\"indigo\"></v-text-field>\r\n                        </template>\r\n                        <v-date-picker v-model=\"task.dueDate\" @input=\"dateMenu = false\" color=\"indigo\"></v-date-picker>\r\n                    </v-menu>\r\n                </v-card-text>\r\n                <v-divider></v-divider>\r\n                <v-card-action class=\"d-flex justify-end pa-3\">\r\n                    <v-btn class=\"indigo white--text\" @click=\"validate\">Edit Project</v-btn>\r\n                    <v-btn class=\"indigo white--text\" @click=\"closePopup\">Cancel</v-btn>\r\n                </v-card-action>\r\n            </v-card>\r\n        </v-form>\r\n    </v-dialog>\r\n</template>\r\n<script>\r\n\r\nimport TeamService from '../services/TeamService';\r\n\r\nimport TaskService from '../services/TaskService';\r\n\r\nimport axios from 'axios';\r\n\r\nimport router from '../router'; \r\n\r\nexport default {\r\n    props: ['initialContent'],\r\n    data() {\r\n        return {\r\n            dialog: false,\r\n            dateMenu: false,\r\n            title: '',\r\n            info: '',\r\n            dueDate: null,\r\n            selectedItem: null,\r\n        items: [],\r\n        taskstatus: [],\r\n            inputRules: [\r\n                v => v.length > 0 || 'Please provide the input'\r\n            ],\r\n\r\n            task: {\r\n                id: this.initialContent.id,\r\n                title: this.initialContent.title,\r\n                info: this.initialContent.info,\r\n                status: this.initialContent.status,\r\n                assign:this.initialContent.assign,\r\n                dueDate:this.initialContent.dueDate\r\n        }\r\n        }\r\n    },\r\n    methods: {\r\n        validate() {\r\n            if (this.$refs.form.validate()) {\r\n                this.$emit('editProject', this.task);\r\n                this.dialog = false;\r\n            }\r\n            try {\r\n                const response = axios.post('http://localhost:8080/tasks', this.task);\r\n                console.log('Response:', response.data);\r\n            } catch (error) {\r\n                console.error('Error:', error);\r\n            }\r\n            this.dialog = false,\r\n            this.dateMenu= false,\r\n            this.$emit('editProject', this.task);\r\n        },\r\n        closePopup() {\r\n            if (this.$refs.form.validate()) {\r\n                this.dialog = false;\r\n            }\r\n            this.$router.push('/projects');\r\n        },\r\n        getEmployees(){\r\n                TeamService.getEmployees().then((response)=>{\r\n                    this.items=response.data;\r\n                });\r\n            },\r\n        getTaskStatus(){\r\n            TaskService.getTaskStatus().then((response)=>{\r\n                    this.taskstatus=response.data;\r\n                });\r\n            },\r\n    },\r\n        created() {\r\n            this.getEmployees(),\r\n            this.getTaskStatus();\r\n        }\r\n}\r\n</script>\r\n"],"mappings":";AAiCA,OAAAA,WAAA;AAEA,OAAAC,WAAA;AAEA,OAAAC,KAAA;AAEA,OAAAC,MAAA;AAEA;EACAC,KAAA;EACAC,KAAA;IACA;MACAC,MAAA;MACAC,QAAA;MACAC,KAAA;MACAC,IAAA;MACAC,OAAA;MACAC,YAAA;MACAC,KAAA;MACAC,UAAA;MACAC,UAAA,GACAC,CAAA,IAAAA,CAAA,CAAAC,MAAA,mCACA;MAEAC,IAAA;QACAC,EAAA,OAAAC,cAAA,CAAAD,EAAA;QACAV,KAAA,OAAAW,cAAA,CAAAX,KAAA;QACAC,IAAA,OAAAU,cAAA,CAAAV,IAAA;QACAW,MAAA,OAAAD,cAAA,CAAAC,MAAA;QACAC,MAAA,OAAAF,cAAA,CAAAE,MAAA;QACAX,OAAA,OAAAS,cAAA,CAAAT;MACA;IACA;EACA;EACAY,OAAA;IACAC,SAAA;MACA,SAAAC,KAAA,CAAAC,IAAA,CAAAF,QAAA;QACA,KAAAG,KAAA,qBAAAT,IAAA;QACA,KAAAX,MAAA;MACA;MACA;QACA,MAAAqB,QAAA,GAAAzB,KAAA,CAAA0B,IAAA,qCAAAX,IAAA;QACAY,OAAA,CAAAC,GAAA,cAAAH,QAAA,CAAAtB,IAAA;MACA,SAAA0B,KAAA;QACAF,OAAA,CAAAE,KAAA,WAAAA,KAAA;MACA;MACA,KAAAzB,MAAA,UACA,KAAAC,QAAA,UACA,KAAAmB,KAAA,qBAAAT,IAAA;IACA;IACAe,WAAA;MACA,SAAAR,KAAA,CAAAC,IAAA,CAAAF,QAAA;QACA,KAAAjB,MAAA;MACA;MACA,KAAA2B,OAAA,CAAAC,IAAA;IACA;IACAC,aAAA;MACAnC,WAAA,CAAAmC,YAAA,GAAAC,IAAA,CAAAT,QAAA;QACA,KAAAf,KAAA,GAAAe,QAAA,CAAAtB,IAAA;MACA;IACA;IACAgC,cAAA;MACApC,WAAA,CAAAoC,aAAA,GAAAD,IAAA,CAAAT,QAAA;QACA,KAAAd,UAAA,GAAAc,QAAA,CAAAtB,IAAA;MACA;IACA;EACA;EACAiC,QAAA;IACA,KAAAH,YAAA,IACA,KAAAE,aAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}