{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapMutations } from 'vuex';\nimport store from '../js/store';\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      username: '',\n      password: '',\n      errorMessage: ''\n    };\n  },\n  methods: {\n    ...mapMutations(['setLoggedIn']),\n    async login() {\n      const employee = {\n        userName: this.username,\n        password: this.password\n      };\n      try {\n        const response = await axios.get('http://localhost:8080/validateUser', {\n          params: employee\n        });\n        if (response.data !== '') {\n          const responseData = response.data;\n          store.commit('setUsername', this.username);\n          store.commit('setLoggedIn', true);\n          store.commit('setAvatar', responseData.avatar);\n          store.commit('setId', responseData.id);\n          store.commit('setRole', responseData.role);\n          this.$router.push('/DashBoard');\n        } else {\n          this.errorMessage = 'Invalid username or password';\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapMutations","store","axios","data","username","password","errorMessage","methods","login","employee","userName","response","get","params","responseData","commit","avatar","id","role","$router","push","error","console"],"sources":["src/pages/LogIn.vue"],"sourcesContent":["<template>\r\n   <div class=\"template\">\r\n  <div class=\"login-container\">\r\n    <div class=\"d-flex justify-center pt-4 pb-2\">\r\n                      <v-avatar size=\"200\">\r\n                          <img src=\"/logo.png\">\r\n                      </v-avatar>\r\n                  </div>\r\n      <div class=\"d-flex justify-center pt-4 pb-2\">\r\n                      <v-avatar size=\"200\">\r\n                          <img src=\"/login.jpg\">\r\n                      </v-avatar>\r\n                  </div>\r\n    <div class=\"input-container\">\r\n    <label for=\"username\">Username:</label>\r\n    <input v-model=\"username\" id=\"username\">\r\n  </div>\r\n  <div class=\"input-container\">\r\n      <label for=\"password\">Password:</label>\r\n    <input v-model=\"password\" type=\"password\">\r\n  </div>\r\n    <button @click=\"login\" class=\"login-button\">Login</button>\r\n    <p v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</p>\r\n  </div>\r\n</div>\r\n</template>\r\n<script>\r\n\r\nimport { mapMutations } from 'vuex'; \r\nimport store from '../js/store'; \r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      username: '',\r\n      password: '',\r\n      errorMessage: ''\r\n    };\r\n  },\r\n      methods: {\r\n      ...mapMutations(['setLoggedIn']),\r\n      async  login() {\r\n      const employee = {\r\n      userName: this.username,\r\n      password: this.password\r\n    };\r\n      try {\r\n          const response = await axios.get('http://localhost:8080/validateUser', {\r\n        params: employee\r\n      });\r\n\r\n      if (response.data !== '') {\r\n          const responseData =response.data\r\n          store.commit('setUsername', this.username); \r\n          store.commit('setLoggedIn', true); \r\n          store.commit('setAvatar', responseData.avatar); \r\n          store.commit('setId', responseData.id); \r\n          store.commit('setRole', responseData.role); \r\n          this.$router.push('/DashBoard');\r\n      } else {\r\n          this.errorMessage = 'Invalid username or password';\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    }\r\n  }  \r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.template {\r\n  background: linear-gradient(to bottom, #0074D9, #004080, #001F3F);\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.login-container {\r\nmax-width: 400px;\r\nmargin: 10px auto; \r\npadding: 20px;\r\nborder: 1px solid #ccc;\r\nborder-radius: 5px;\r\nbackground-color: #f5f5f5;\r\ntext-align: center;\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\n}\r\n\r\nh1 {\r\ncolor: #333;\r\nfont-size: 24px;\r\nmargin-bottom: 20px;\r\n}\r\n\r\n.input-field {\r\nwidth: 100%;\r\npadding: 10px;\r\nmargin-bottom: 15px;\r\nborder: 1px solid #ccc;\r\nborder-radius: 5px;\r\nfont-size: 14px;\r\n}\r\n\r\n.login-button {\r\nbackground-color:rgb(26, 154, 234);\r\ncolor: #fff;\r\nborder: none;\r\nborder-radius: 5px;\r\npadding: 10px 15px;\r\ncursor: pointer;\r\n}\r\n\r\n.error-message {\r\ncolor: #ff0000;\r\nmargin-top: 10px;\r\n}\r\n.input-container {\r\ndisplay: flex;\r\nalign-items: center; /* İçerikleri dikeyde hizalar */\r\nmargin-bottom: 10px; /* İhtiyaca göre alt boşluk ekleme */\r\n}\r\n\r\n.input-container label {\r\nmargin-right: 10px; /* Label ile input arasına boşluk bırakma */\r\n}\r\n</style>"],"mappings":";AA4BA,SAAAA,YAAA;AACA,OAAAC,KAAA;AACA,OAAAC,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,QAAA;MACAC,QAAA;MACAC,YAAA;IACA;EACA;EACAC,OAAA;IACA,GAAAP,YAAA;IACA,MAAAQ,MAAA;MACA,MAAAC,QAAA;QACAC,QAAA,OAAAN,QAAA;QACAC,QAAA,OAAAA;MACA;MACA;QACA,MAAAM,QAAA,SAAAT,KAAA,CAAAU,GAAA;UACAC,MAAA,EAAAJ;QACA;QAEA,IAAAE,QAAA,CAAAR,IAAA;UACA,MAAAW,YAAA,GAAAH,QAAA,CAAAR,IAAA;UACAF,KAAA,CAAAc,MAAA,qBAAAX,QAAA;UACAH,KAAA,CAAAc,MAAA;UACAd,KAAA,CAAAc,MAAA,cAAAD,YAAA,CAAAE,MAAA;UACAf,KAAA,CAAAc,MAAA,UAAAD,YAAA,CAAAG,EAAA;UACAhB,KAAA,CAAAc,MAAA,YAAAD,YAAA,CAAAI,IAAA;UACA,KAAAC,OAAA,CAAAC,IAAA;QACA;UACA,KAAAd,YAAA;QACA;MACA,SAAAe,KAAA;QACAC,OAAA,CAAAD,KAAA,CAAAA,KAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}