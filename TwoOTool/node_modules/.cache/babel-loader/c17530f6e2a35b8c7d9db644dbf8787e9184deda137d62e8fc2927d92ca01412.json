{"ast":null,"code":"import TeamService from '../services/TeamService';\nimport axios from 'axios';\nimport AvatarComboBox from './AvatarComboBox.vue';\nexport default {\n  components: {\n    AvatarComboBox\n  },\n  data() {\n    return {\n      avatars: ['charmander.png', 'pidgeot.png', 'butterfree.png'],\n      selectedAvatar: null,\n      dialog: false,\n      dateMenu: false,\n      title: '',\n      info: '',\n      titles: [],\n      items: [],\n      inputRules: [v => v.length > 0 || 'Please provide the input'],\n      employee: {\n        avatar: '',\n        email: '',\n        name: '',\n        password: '',\n        phone: '',\n        title: '',\n        userName: '',\n        admin: ''\n      }\n    };\n  },\n  methods: {\n    validate() {\n      if (this.$refs.form.validate()) {\n        this.$emit('addMember', this.title);\n        this.dialog = false;\n      }\n      try {\n        const response = axios.post('http://localhost:8080/employees', this.employee);\n        console.log('Response:', response.data);\n      } catch (error) {\n        console.error('Error:', error);\n      }\n      this.employee.avatar = '', this.employee.email = '', this.employee.name = '', this.employee.password = '', this.employee.title = '', this.employee.userName = '', this.employee.admin = '', this.dialog = false, this.dateMenu = false;\n    },\n    setEmployeeAvatar(selectedAvatar) {\n      this.employee.avatar = selectedAvatar;\n    },\n    closePopup() {\n      if (this.$refs.form.validate()) {\n        this.dialog = false;\n      }\n      this.employee.avatar = '', this.employee.email = '', this.employee.name = '', this.employee.password = '', this.employee.phone = '', this.employee.title = '', this.employee.userName = '', this.employee.admin = '', this.dialog = false, this.dateMenu = false;\n    },\n    getEmployees() {\n      TeamService.getEmployees().then(response => {\n        this.items = response.data;\n      });\n    },\n    getTitles() {\n      TeamService.getTitles().then(response => {\n        this.titles = response.data;\n      });\n    }\n  },\n  created() {\n    this.getEmployees(), this.getTitles();\n  }\n};","map":{"version":3,"names":["TeamService","axios","AvatarComboBox","components","data","avatars","selectedAvatar","dialog","dateMenu","title","info","titles","items","inputRules","v","length","employee","avatar","email","name","password","phone","userName","admin","methods","validate","$refs","form","$emit","response","post","console","log","error","setEmployeeAvatar","closePopup","getEmployees","then","getTitles","created"],"sources":["src/components/EmployeePopUp.vue"],"sourcesContent":["<template>\r\n    <v-dialog max-width=\"600px\" v-model=\"dialog\">\r\n        <template v-slot:activator=\"{ on, attrs }\">\r\n            <v-btn style=\"width: 75px; height: 30px; background-color: #0074D9;\" v-bind=\"attrs\" v-on=\"on\" >\r\n                <span style=\"font-size: 15px; color: white;\">Add</span>\r\n            </v-btn>\r\n        </template>\r\n        <v-form ref=\"form\">\r\n            <v-card>\r\n                <v-card-title>Add Member</v-card-title>\r\n                <v-divider></v-divider>\r\n                <v-card-text class=\"pt-5 pb-0\">\r\n                    <v-text-field label=\"Name\" v-model=\"employee.name\" outlined color=\"#0074D9\"></v-text-field>\r\n                    <v-select v-model=\"employee.title\" :items=\"titles\" item-text=\"title\" item-value=\"id\" label=\"Title\" outlined color=\"#0074D9\"></v-select>\r\n                    <v-text-field label=\"Email\" v-model=\"employee.email\" outlined color=\"#0074D9\"></v-text-field>\r\n                    <div id=\"app\">\r\n                        <AvatarComboBox v-model=\"employee.avatar\" @avatarSelected=\"setEmployeeAvatar\" />\r\n                    </div>\r\n                    <v-text-field label=\"Username\" v-model=\"employee.userName\" outlined color=\"#0074D9\"></v-text-field>\r\n                    <v-text-field label=\"Password\" placeholder=\"\" v-model=\"employee.password\" outlined color=\"#0074D9\"></v-text-field>\r\n                    <label for=\"checkbox\">Admin: </label>\r\n                    <input\r\n                        v-text=\"Admin\"\r\n                        type=\"checkbox\"\r\n                        v-model=\"employee.admin\"\r\n                        true-value=\"yes\"\r\n                        false-value=\"no\" />\r\n                </v-card-text>\r\n                <v-divider></v-divider>\r\n                <v-card-action class=\"d-flex justify-end pa-3\">\r\n                    <v-btn color=\"#0074D9\"  style=\"color: white; width: 110px; height: 25px\" @click=\"validate\">Add Member</v-btn>\r\n                    <v-btn color=\"#0074D9\"  style=\"color: white; width: 80px; height: 25px\" @click=\"closePopup\">Cancel</v-btn>\r\n                </v-card-action>\r\n            </v-card>\r\n        </v-form>\r\n    </v-dialog>\r\n</template>\r\n<script>\r\n\r\nimport TeamService from '../services/TeamService';\r\nimport axios from 'axios';\r\nimport AvatarComboBox from './AvatarComboBox.vue';\r\n\r\nexport default {\r\n    components: {\r\n    AvatarComboBox,\r\n  },\r\n    data() {\r\n        return {\r\n            avatars: ['charmander.png', 'pidgeot.png', 'butterfree.png'],\r\n            selectedAvatar: null,\r\n            dialog: false,\r\n            dateMenu: false,\r\n            title: '',\r\n            info: '',\r\n            titles : [],        \r\n            items: [],\r\n            inputRules: [\r\n                v => v.length > 0 || 'Please provide the input'\r\n            ],\r\n\r\n            employee: {\r\n                avatar: '',\r\n                email: '',\r\n                name: '',\r\n                password:'',\r\n                phone:'',\r\n                title:'',\r\n                userName:'',\r\n                admin:''\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        validate() {\r\n            if (this.$refs.form.validate()) {\r\n                this.$emit('addMember', this.title);\r\n                this.dialog = false;\r\n            }\r\n            try {\r\n                const response = axios.post('http://localhost:8080/employees', this.employee);\r\n                console.log('Response:', response.data);\r\n            } catch (error) {\r\n                console.error('Error:', error);\r\n            }\r\n            this.employee.avatar= '',\r\n            this.employee.email= '',\r\n            this.employee.name='',\r\n            this.employee.password='',\r\n            this.employee.title='',\r\n            this.employee.userName='',\r\n            this.employee.admin='',\r\n            this.dialog = false,\r\n            this.dateMenu= false\r\n        }, \r\n        setEmployeeAvatar(selectedAvatar) {\r\n        this.employee.avatar = selectedAvatar;\r\n    },\r\n        closePopup() {\r\n            if (this.$refs.form.validate()) {\r\n                this.dialog = false;\r\n            }\r\n            this.employee.avatar= '',\r\n            this.employee.email= '',\r\n            this.employee.name='',\r\n            this.employee.password='',\r\n            this.employee.phone='',\r\n            this.employee.title='',\r\n            this.employee.userName='',\r\n            this.employee.admin='',\r\n            this.dialog = false,\r\n            this.dateMenu= false\r\n        },\r\n        getEmployees(){\r\n                TeamService.getEmployees().then((response)=>{\r\n                    this.items=response.data;\r\n                });\r\n            },\r\n            getTitles(){\r\n            TeamService.getTitles().then((response)=>{\r\n                    this.titles=response.data;\r\n                });\r\n            }\r\n    },\r\n        created() {\r\n            this.getEmployees(),\r\n            this.getTitles();\r\n        }\r\n}\r\n</script>\r\n"],"mappings":"AAuCA,OAAAA,WAAA;AACA,OAAAC,KAAA;AACA,OAAAC,cAAA;AAEA;EACAC,UAAA;IACAD;EACA;EACAE,KAAA;IACA;MACAC,OAAA;MACAC,cAAA;MACAC,MAAA;MACAC,QAAA;MACAC,KAAA;MACAC,IAAA;MACAC,MAAA;MACAC,KAAA;MACAC,UAAA,GACAC,CAAA,IAAAA,CAAA,CAAAC,MAAA,mCACA;MAEAC,QAAA;QACAC,MAAA;QACAC,KAAA;QACAC,IAAA;QACAC,QAAA;QACAC,KAAA;QACAZ,KAAA;QACAa,QAAA;QACAC,KAAA;MACA;IACA;EACA;EACAC,OAAA;IACAC,SAAA;MACA,SAAAC,KAAA,CAAAC,IAAA,CAAAF,QAAA;QACA,KAAAG,KAAA,mBAAAnB,KAAA;QACA,KAAAF,MAAA;MACA;MACA;QACA,MAAAsB,QAAA,GAAA5B,KAAA,CAAA6B,IAAA,yCAAAd,QAAA;QACAe,OAAA,CAAAC,GAAA,cAAAH,QAAA,CAAAzB,IAAA;MACA,SAAA6B,KAAA;QACAF,OAAA,CAAAE,KAAA,WAAAA,KAAA;MACA;MACA,KAAAjB,QAAA,CAAAC,MAAA,OACA,KAAAD,QAAA,CAAAE,KAAA,OACA,KAAAF,QAAA,CAAAG,IAAA,OACA,KAAAH,QAAA,CAAAI,QAAA,OACA,KAAAJ,QAAA,CAAAP,KAAA,OACA,KAAAO,QAAA,CAAAM,QAAA,OACA,KAAAN,QAAA,CAAAO,KAAA,OACA,KAAAhB,MAAA,UACA,KAAAC,QAAA;IACA;IACA0B,kBAAA5B,cAAA;MACA,KAAAU,QAAA,CAAAC,MAAA,GAAAX,cAAA;IACA;IACA6B,WAAA;MACA,SAAAT,KAAA,CAAAC,IAAA,CAAAF,QAAA;QACA,KAAAlB,MAAA;MACA;MACA,KAAAS,QAAA,CAAAC,MAAA,OACA,KAAAD,QAAA,CAAAE,KAAA,OACA,KAAAF,QAAA,CAAAG,IAAA,OACA,KAAAH,QAAA,CAAAI,QAAA,OACA,KAAAJ,QAAA,CAAAK,KAAA,OACA,KAAAL,QAAA,CAAAP,KAAA,OACA,KAAAO,QAAA,CAAAM,QAAA,OACA,KAAAN,QAAA,CAAAO,KAAA,OACA,KAAAhB,MAAA,UACA,KAAAC,QAAA;IACA;IACA4B,aAAA;MACApC,WAAA,CAAAoC,YAAA,GAAAC,IAAA,CAAAR,QAAA;QACA,KAAAjB,KAAA,GAAAiB,QAAA,CAAAzB,IAAA;MACA;IACA;IACAkC,UAAA;MACAtC,WAAA,CAAAsC,SAAA,GAAAD,IAAA,CAAAR,QAAA;QACA,KAAAlB,MAAA,GAAAkB,QAAA,CAAAzB,IAAA;MACA;IACA;EACA;EACAmC,QAAA;IACA,KAAAH,YAAA,IACA,KAAAE,SAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}