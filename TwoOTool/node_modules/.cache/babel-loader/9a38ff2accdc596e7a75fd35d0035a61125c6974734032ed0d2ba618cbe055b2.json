{"ast":null,"code":"import TeamService from '../services/TeamService';\nimport axios from 'axios';\nexport default {\n  props: ['initialContent'],\n  data() {\n    return {\n      dialog: false,\n      dateMenu: false,\n      title: '',\n      info: '',\n      dueDate: null,\n      selectedItem: null,\n      items: [],\n      inputRules: [v => v.length > 0 || 'Please provide the input'],\n      task: {\n        id: this.initialContent.id,\n        title: this.initialContent.title,\n        info: this.initialContent.info,\n        status: this.initialContent.status,\n        assign: this.initialContent.assign,\n        dueDate: this.initialContent.dueDate\n      }\n    };\n  },\n  methods: {\n    validate() {\n      if (this.$refs.form.validate()) {\n        this.$emit('addedProject', this.title);\n        this.dialog = false;\n      }\n      try {\n        const response = axios.post('http://localhost:8080/tasks', this.task);\n        console.log('Response:', response.data);\n      } catch (error) {\n        console.error('Error:', error);\n      }\n      this.task.title = '', this.task.info = '', this.task.assign = '', this.task.dueDate = '', this.dialog = false, this.dateMenu = false;\n    },\n    closePopup() {\n      if (this.$refs.form.validate()) {\n        this.$emit('addedProject', this.title);\n        this.dialog = false;\n      }\n      this.task.title = '', this.task.info = '', this.task.assign = '', this.task.dueDate = '', this.dialog = false, this.dateMenu = false;\n    },\n    getEmployees() {\n      TeamService.getEmployees().then(response => {\n        this.items = response.data;\n      });\n    }\n  },\n  created() {\n    this.getEmployees();\n  }\n};","map":{"version":3,"names":["TeamService","axios","props","data","dialog","dateMenu","title","info","dueDate","selectedItem","items","inputRules","v","length","task","id","initialContent","status","assign","methods","validate","$refs","form","$emit","response","post","console","log","error","closePopup","getEmployees","then","created"],"sources":["src/components/PopUp.vue"],"sourcesContent":["<template>\n    <v-dialog max-width=\"600px\" v-model=\"dialog\">\n        <template v-slot:activator=\"{ on, attrs }\">\n            <v-btn v-bind=\"attrs\" v-on=\"on\">Add Task</v-btn>\n            <v-btn v-bind=\"attrs\" v-on=\"on\">Edit Task</v-btn>\n        </template>\n        <v-form ref=\"form\">\n            <v-card>\n                <v-card-title>Add New Project</v-card-title>\n                <v-divider></v-divider>\n                <v-card-text class=\"pt-5 pb-0\">\n                    <v-text-field label=\"Title\" v-model=\"task.title\" outlined color=\"indigo\"></v-text-field>\n                    <v-textarea label=\"Information\" v-model=\"task.info\" rows=\"3\" outlined color=\"indigo\"></v-textarea>\n                    <v-select v-model=\"task.assign\" :items=\"items\" item-text=\"name\" item-value=\"id\" label=\"Assign\" outlined color=\"indigo\"></v-select>\n                    <v-menu v-model=\"dateMenu\" :close-on-content-click=\"false\">\n                        <template v-slot:activator=\"{ on, attrs }\">\n                            <v-text-field v-model=\"task.dueDate\" label=\"Due date\" readonly outlined v-bind=\"attrs\"\n                                v-on=\"on\" color=\"indigo\"></v-text-field>\n                        </template>\n                        <v-date-picker v-model=\"task.dueDate\" @input=\"dateMenu = false\" color=\"indigo\"></v-date-picker>\n                    </v-menu>\n                </v-card-text>\n                <v-divider></v-divider>\n                <v-card-action class=\"d-flex justify-end pa-3\">\n                    <v-btn class=\"indigo white--text\" @click=\"validate\">Add Project</v-btn>\n                    <v-btn class=\"indigo white--text\" @click=\"closePopup\">Cancel</v-btn>\n                </v-card-action>\n            </v-card>\n        </v-form>\n    </v-dialog>\n</template>\n\n<script>\n\nimport TeamService from '../services/TeamService';\nimport axios from 'axios';\n\nexport default {\n    props: ['initialContent'],\n    data() {\n        return {\n            dialog: false,\n            dateMenu: false,\n            title: '',\n            info: '',\n            dueDate: null,\n            selectedItem: null,\n        items: [],\n            inputRules: [\n                v => v.length > 0 || 'Please provide the input'\n            ],\n\n            task: {\n                id: this.initialContent.id,\n                title: this.initialContent.title,\n                info: this.initialContent.info,\n                status: this.initialContent.status,\n                assign:this.initialContent.assign,\n                dueDate:this.initialContent.dueDate\n        }\n        }\n    },\n    methods: {\n        validate() {\n            if (this.$refs.form.validate()) {\n                this.$emit('addedProject', this.title);\n                this.dialog = false;\n            }\n            try {\n                const response = axios.post('http://localhost:8080/tasks', this.task);\n                console.log('Response:', response.data);\n            } catch (error) {\n                console.error('Error:', error);\n            }\n            this.task.title= '',\n            this.task.info= '',\n            this.task.assign='',\n            this.task.dueDate='',\n            this.dialog = false,\n            this.dateMenu= false\n        }, \n        closePopup() {\n            if (this.$refs.form.validate()) {\n                this.$emit('addedProject', this.title);\n                this.dialog = false;\n            }\n            this.task.title= '',\n            this.task.info= '',\n            this.task.assign='',\n            this.task.dueDate='',\n            this.dialog = false,\n            this.dateMenu= false\n        },\n        getEmployees(){\n                TeamService.getEmployees().then((response)=>{\n                    this.items=response.data;\n                });\n            }\n    },\n        created() {\n            this.getEmployees();\n        }\n}\n</script>\n"],"mappings":"AAkCA,OAAAA,WAAA;AACA,OAAAC,KAAA;AAEA;EACAC,KAAA;EACAC,KAAA;IACA;MACAC,MAAA;MACAC,QAAA;MACAC,KAAA;MACAC,IAAA;MACAC,OAAA;MACAC,YAAA;MACAC,KAAA;MACAC,UAAA,GACAC,CAAA,IAAAA,CAAA,CAAAC,MAAA,mCACA;MAEAC,IAAA;QACAC,EAAA,OAAAC,cAAA,CAAAD,EAAA;QACAT,KAAA,OAAAU,cAAA,CAAAV,KAAA;QACAC,IAAA,OAAAS,cAAA,CAAAT,IAAA;QACAU,MAAA,OAAAD,cAAA,CAAAC,MAAA;QACAC,MAAA,OAAAF,cAAA,CAAAE,MAAA;QACAV,OAAA,OAAAQ,cAAA,CAAAR;MACA;IACA;EACA;EACAW,OAAA;IACAC,SAAA;MACA,SAAAC,KAAA,CAAAC,IAAA,CAAAF,QAAA;QACA,KAAAG,KAAA,sBAAAjB,KAAA;QACA,KAAAF,MAAA;MACA;MACA;QACA,MAAAoB,QAAA,GAAAvB,KAAA,CAAAwB,IAAA,qCAAAX,IAAA;QACAY,OAAA,CAAAC,GAAA,cAAAH,QAAA,CAAArB,IAAA;MACA,SAAAyB,KAAA;QACAF,OAAA,CAAAE,KAAA,WAAAA,KAAA;MACA;MACA,KAAAd,IAAA,CAAAR,KAAA,OACA,KAAAQ,IAAA,CAAAP,IAAA,OACA,KAAAO,IAAA,CAAAI,MAAA,OACA,KAAAJ,IAAA,CAAAN,OAAA,OACA,KAAAJ,MAAA,UACA,KAAAC,QAAA;IACA;IACAwB,WAAA;MACA,SAAAR,KAAA,CAAAC,IAAA,CAAAF,QAAA;QACA,KAAAG,KAAA,sBAAAjB,KAAA;QACA,KAAAF,MAAA;MACA;MACA,KAAAU,IAAA,CAAAR,KAAA,OACA,KAAAQ,IAAA,CAAAP,IAAA,OACA,KAAAO,IAAA,CAAAI,MAAA,OACA,KAAAJ,IAAA,CAAAN,OAAA,OACA,KAAAJ,MAAA,UACA,KAAAC,QAAA;IACA;IACAyB,aAAA;MACA9B,WAAA,CAAA8B,YAAA,GAAAC,IAAA,CAAAP,QAAA;QACA,KAAAd,KAAA,GAAAc,QAAA,CAAArB,IAAA;MACA;IACA;EACA;EACA6B,QAAA;IACA,KAAAF,YAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}